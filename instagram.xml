<?php

require(dirname(__FILE__)."/config.php");

//returns a big old hunk of JSON from a non-private IG account page.
function scrape_insta($username) {
	$insta_source = file_get_contents('http://instagram.com/'.$username);
	$shards = explode('window._sharedData = ', $insta_source);
	$insta_json = explode(';</script>', $shards[1]); 
	$insta_array = json_decode($insta_json[0], TRUE);
	return $insta_array;
}

function RSSQuery ($query,$multiple=False,$parameters=false,$parameterValues = array(), $returnfield = null) {
	// $query = SQL query to pass to the server
	// $multiple = returns first row as an array if false, returns all rows as an array of arrays if true
	// $parameters = whether or not there are paramaterized values in the query, represented by ?
	// $paramterValues = array of the parameters in the order they appear in the query
	// $returnfield = column whose value should be return after running the query
	
	// Returns FALSE if query fails
	// For successful SELECT, returns array based on $multiple
	// For successful INSERT, returns TRUE or value of $returnfield
	// For all other successful querys, returns TRUE
		
	// Connection Variables
	$mysql_hostname = mysql_hostname; 					// IP, hostname, or FQDN of SQL server
	$mysql_user = mysql_user;			    		// SQL user
	$mysql_password = mysql_password;	// Password for SQL user
	$mysql_database = mysql_database;		// Name of database
	
	return MyQuery($query,$multiple,$parameters,$parameterValues,$mysql_hostname,$mysql_user,$mysql_password, $mysql_database,$returnfield);
}	

function MyQuery($query,$multiple,$parameters,$parameterValues,$mysql_hostname,$mysql_user,$mysql_password, $mysql_database,$returnfield) {
	$frameworkerror = "";
	// Connect to database
	try {
		$db = new PDO("mysql:host=$mysql_hostname;dbname=$mysql_database", $mysql_user, $mysql_password, array(PDO::ATTR_ERRMODE => PDO::ERRMODE_WARNING));
	} catch (PDOException $e) {
		$frameworkerror .= 'Connection failed: ' . $e->getMessage();
		echo $frameworkerror;
		exit;
	}
	
	// Check for error while connecting to database. If there is an error, print error, exit and return false.
	if (isset($db->connect_errno)){ 
		echo "Failed to connect to MySQL: " . $db->connect_errno; // *** This should be changed to [echo "Failed to connect to MySQL"] after testing 
		return False; 	
	} else {
		$stmt = $db->prepare($query);
		$db->beginTransaction();
		if ($parameters > 0) {
			$i = 1;
			foreach ($parameterValues as $key => $parameterValue) {
				if ($parameterValue == 'NULL') {
					$stmt->bindParam($i, null, PDO::PARAM_INT);
				} elseif ($parameterValue == '') {
					$stmt->bindValue($i, null, PDO::PARAM_INT);
				} else {
					$stmt->bindParam($i, $parameterValues[$key], PDO::PARAM_STR);
				}
				$i++;
			}	
		}
		$errorCheck = $stmt->execute();
		if ($errorCheck === False) {
			$frameworkerror .= "Error<br>".$query."<br><pre>".print_r($stmt->errorInfo())."</pre>"; // *** Error should be non-specific after testing
			$frameworkerror .= "<pre>".$query."</pre>";
			$frameworkerror .= "<pre>".print_r($parameterValues)."</pre>";
			return False;
		}
		if ($returnfield !== null) {
			$returnvalue = $db->lastInsertID($returnfield);
		}
		$db->commit();
		if ($stmt->columnCount() > 0) {
			$result = $stmt->fetchAll(PDO::FETCH_ASSOC);
		} elseif ($returnfield !== null) {
			return $returnvalue;
		} else {
			$result = $errorCheck;
		}

		// If $multiple is true, return result of query. Otherwise, convert the result to an array and return the array
		if ($multiple === True) {
			return $result; 
		} elseif (($result === True) || ($result === False) || !($result)) {
			return $result;
		} else {
			return $result[0]; 
		}
	}
}

function checkNextUpdate($feedTitle){
	$query = "SELECT nextUpdate
			  FROM instagramfeeds
			  WHERE feedID = ?";
	$result = RSSQuery($query,false,true,array($feedTitle));
	if (empty($result)){
		return true;
	} else {
		if(new DateTime() > new DateTime($result['nextUpdate'])) {
			return true;
		} else {
			return false;
		}
	}
}
	
function returnCachedRSS($feedTitle){
	$query = "SELECT feed, lastUpdate
			  FROM instagramfeeds
			  WHERE feedID =?";
	$result = RSSQuery($query,false,true,array($feedTitle));
	echo $result['feed'];
	echo "<!-- Last Updated: ".$result['lastUpdate']."-->";
}

function scrapeRSS($feedTitle) {
	$results_array = scrape_insta($feedTitle);
	if (!empty($results_array['entry_data']['ProfilePage'][0]['user']['media']['nodes'])) {
		$rss  = '<?xml version="1.0" encoding="UTF-8"?>'."\n";
		$rss .= '<rss version="2.0">'."\n";
		$rss .= '	<channel>'."\n";
		$rss .= '		<title>'.$feedTitle.'</title>'."\n";
		$rss .= '		<link>http://instagram.com/'.$feedTitle.'</link>'."\n";
		$rss .= '		<description/>'."\n";
		foreach ($results_array['entry_data']['ProfilePage'][0]['user']['media']['nodes'] as $node) {
			$rss .= '		<item>'."\n";
			if (empty($node['caption'])) {$title = "(null)"; } else {$title = $node['caption']; }
			$rss .= '			<title>'.$title.'</title>'."\n";
			$rss .= '			<link>https://www.instagram.com/p/'.$node['code'].'/</link>'."\n";
			$rss .= '			<guid isPermaLink="false">'.$node['id'].'</guid>'."\n";
			$rss .= '			<pubDate>'.date(DATE_RSS,$node['date']).'</pubDate>'."\n";
			$rss .= '			<description><![CDATA[<img src="'.$node['display_src'].'">]]></description>'."\n";
			$rss .= '		</item>'."\n";
		}

		$rss .= '	</channel>'."\n";
		$rss .= '</rss>'."\n";
		
		$query = "INSERT into instagramfeeds (feedID, feed, lastUpdate, nextUpdate)
					values(?, ?, NOW(),FROM_UNIXTIME(UNIX_TIMESTAMP(NOW())+FLOOR(3600+RAND()*3600)))
				  ON DUPLICATE KEY UPDATE
					feed=?, lastUpdate = NOW(), nextUpdate = FROM_UNIXTIME(UNIX_TIMESTAMP(NOW())+FLOOR(3600+RAND()*3600))";
		RSSQuery($query,false,true,array($feedTitle,$rss,$rss));
		$result = "\n<!-- Found ".count($results_array['entry_data']['ProfilePage'][0]['user']['media']['nodes'])." entries -->";
	} else {
		$result = "\n<!-- No entries found -->";
	}
	
	returnCachedRSS($feedTitle);
	echo $result;
}

//Supply a username
if(isset($_GET["name"])) {
	$my_account = $_GET["name"]; 
} else {
	$my_account = 'cosmocatalano'; 
}

if (checkNextUpdate($my_account)) {
	scrapeRSS($my_account);
} else {
	returnCachedRSS($my_account);
}

	
?>
